#!/usr/bin/python

import sys
import math
import os
import struct
import h5py
import subprocess
import logging
import argparse_vvplot
args = argparse_vvplot.args

class delimiter:
	"""First time it prints 'plot', else it prints comma
	"""
	def __init__(self):
		self.first = True;
	def get(self):
		if self.first:
			self.first = False
			return "plot"
		else:
			return ","

def ternary(cond, a, b):
	if cond:
		return a
	else:
		return b

logger = logging.getLogger("vvplot")
log_level = logging.DEBUG if args.debug else logging.ERROR
log_format = '%(name)s: %(levelname)s: %(message)s'
logging.basicConfig(format=log_format, level=log_level)

################################################################################
## WORK WITH FILENAMES

fin = args.input_file
fin_name = fin.name
fout_name = args.output_file

if os.path.isdir(fout_name):
	#generate filename and override fout_name
	opts = str()
	if (args.plot_body): opts+= 'b'
	if (args.plot_vorticity): opts+= 'g'
	if (args.plot_heat): opts+= 'H'
	if (args.plot_ink): opts+= 'i'
	if (args.plot_isotherms): opts+= 'O'
	if (args.plot_pressure): opts+= 'p%s'%args.pressure
	if (args.plot_isopressure): opts+= 'P%s'%args.pressure
	if (args.plot_streamlines): opts+= 's%s'%args.streamlines
	if (args.plot_temperature): opts+= 't'
	if (args.plot_vortexes): opts+= 'v'
	if (args.plot_vortexes_bold): opts+= 'V'
	filename = os.path.splitext(os.path.basename(fin_name))[0]
	fout_name = os.path.join(fout_name, '%s.%s.png'%(filename, opts))
	del opts

if os.path.exists(fout_name) and args.mode_nooverride:
	exit()

################################################################################
## WORK WITH CONSTRAINTS 

xmin,xmax = args.size_x;
ymin,ymax = args.size_y;
pic_w, pic_h = args.size_pic;

class AdjustmentError(Exception):
	def __init__(self, value):
		self.value = value
	def __str__(self):
		return repr(self.value)

#trying to adjust absent sizes
try:
	if xmin == xmax:
		raise Exception("XMIX and XMAX can not be equal")
	if xmin > xmax:
		tmp = xmin; xmin = xmax; xmax = tmp; del tmp;
	if (pic_w > 0 and pic_h > 0):
		if (ymin!=ymin and ymax!=ymax):
			#adjust ymax = -ymin
			ymax = (xmax-xmin)*pic_h/pic_w/2
			ymin = -ymax
		elif ymin!=ymin:
			#adjust ymin
			ymin = ymax - (xmax-xmin)*pic_h/pic_w
		elif ymax!=ymax:
			#adjust ymax
			ymax = ymin + (xmax-xmin)*pic_h/pic_w
		elif ymin == ymax:
			#adjust symmetric ymin, ymax
			y_center = ymin
			ymax = y_center + (xmax-xmin)*pic_h/pic_w/2
			ymin = y_center - (xmax-xmin)*pic_h/pic_w/2
			del y_center
		else:
			#adjust pic_h
			pic_h = int(float(pic_w) * (ymax-ymin)/(xmax-xmin))
	else:
		if (ymin == ymax):
			raise AdjustmentError("YMIN, YMAX")
		elif (ymin!=ymin and ymax!=ymax):
			raise AdjustmentError("YMIN, YMAX")
		elif (ymin!=ymin):
			raise AdjustmentError("YMIN")
		elif (ymax!=ymax):
			raise AdjustmentError("YMAX")
		# if both ymin and ymax are present we can continue
		if (pic_w == 0):
			pic_w = int(float(pic_h) * (xmax-xmin)/(ymax-ymin))
		else:
			pic_h = int(float(pic_w) * (ymax-ymin)/(xmax-xmin))
except AdjustmentError as s:
	argparse_vvplot.parser.print_usage()
	print 'AdjustmentError: Can not adjust both %s and picture size' % s.value
	exit()
except Exception as s:
	argparse_vvplot.parser.print_usage()
	print 'Error: %s' % s.message
	exit()

################################################################################
## READING BINARY HEADER

file = h5py.File(fin_name, "r")
# print 'caption = '+file.attrs['caption']
# print 'Re = '+str(file.attrs['re']);

realtime = file.attrs['time_local']
time = (lambda frac: float(frac[0])/float(frac[1]))(file.attrs['time'])
try:
	marker_x, marker_y = file.attrs['inf_marker']
except:
	marker_x, marker_y = [0, 0]

datasets = file.keys()
# bodies = [str(b) for b in datasets if str(b)[0:4] == "body"]
bodies = []
for b in datasets:
	if str(b)[0:4] == "body":
		name = str(b)
		try:
			holder_position = file[b].attrs['holder_position']
		except:
			holder_position = (0, 0, 0)
		try:
			delta_position = file[b].attrs['delta_position']
		except:
			delta_position = (0, 0, 0)
		bodies.append({'name':name, 'holder_position':holder_position, 'delta_position':delta_position})
lists = [str(l) for l in datasets if str(l) in ["vort", "heat", "ink", "ink_source"]]
file.close()

################################################################################
## 

if args.referenceframe == 'o':
	x_shift = y_shift = 0.;
elif args.referenceframe == 'b':
	raise Esception("Body reference frame is not implemented yet")
elif args.referenceframe == 'f':
	x_shift = -marker_x;
	y_shift = -marker_y;

try:
	vv_prec_hi = os.getenv("VV_PREC_HI") or 500.0
	vv_prec_hi = (xmax-xmin)/float(vv_prec_hi)
except ValueError as e:
	print "vvplot: error: environment VV_PREC_HI: %s" % e.message
	exit()

try:
	vv_prec_lo = os.getenv("VV_PREC_LO") or 200.0
	vv_prec_lo = (xmax-xmin)/float(vv_prec_lo)
except ValueError as e:
	print "vvplot: error: environment VV_PREC_LO: %s" % e.message
	exit()

try:
	vv_vort_range = os.getenv("VV_VORT_RANGE") or 50.
	vv_vort_range = float(vv_vort_range)
except ValueError as e:
	print "vvplot: error: environment VV_VORT_RANGE: %s" % e.message
	exit()


############################## CALC FIELDS #####################################

boundaries = (str(xmin - vv_prec_lo),
              str(xmax + vv_prec_lo),
              str(ymin - vv_prec_lo),
              str(ymax + vv_prec_lo))

pids = list()

home = os.getenv("HOME")
presplot_exe = os.path.join(home, ".local/bin/presplot_exe")
heatplot_exe = os.path.join(home, ".local/bin/heatplot_exe")
vorticity_exe = os.path.join(home, ".local/bin/vorticity_exe")
streamlines_exe = os.path.join(home, ".local/bin/streamlines_exe")
isoline_exe = os.path.join(home, ".local/bin/isoline_exe")

#PRESS FIELD
if args.plot_pressure or args.plot_isopressure:
	if not os.path.exists("%s.%c.map" % (fin_name, args.pressure)) or args.mode_force:
		pids.append(os.spawnvp(os.P_NOWAIT, presplot_exe, \
		               (presplot_exe, fin_name,
		               str(vv_prec_hi)) + boundaries + tuple(args.pressure)));

#TEMPERATURE FIELD
if args.plot_temperature or args.plot_isotherms:
	if not os.path.exists("%s.heat" % fin_name) or args.mode_force:
		pids.append(os.spawnvp(os.P_NOWAIT, heatplot_exe,
		               (heatplot_exe, fin_name, str(vv_prec_hi)) + boundaries));

#VORTICITY FIELD
if args.plot_vorticity:
	if not os.path.exists("%s.vrtc" % fin_name) or args.mode_force:
		pids.append(os.spawnvp(os.P_NOWAIT, vorticity_exe,
		              (vorticity_exe, fin_name, str(vv_prec_hi)) + boundaries));

#PSI FUNCTION FIELD
if args.plot_streamlines:
	if not os.path.exists("%s.psi" % fin_name) or args.mode_force:
		pids.append(os.spawnvp(os.P_NOWAIT, streamlines_exe,
		               (streamlines_exe, fin_name,
		               str(vv_prec_lo)) + boundaries + tuple(args.streamlines)));

for i in pids:
	os.waitpid(i, 0)

if args.mode_dry: exit()
#TODOread more about subprocess module

############################## CALL GNUPLOT ####################################

gp = os.popen("gnuplot", "w")
gp.write("""
set terminal pngcairo enhanced %s size %d, %d font "FreeSerif, 26"
set output '%s'
""" % (ternary(args.mode_bw, "mono", "color"), pic_w, pic_h, fout_name))

gp.write("""
set lmargin 0
set rmargin 0
set bmargin 0
set tmargin 0
unset key
set border 0
set zeroaxis
unset xtics
unset ytics
set xrange [%f: %f]
set yrange [%f: %f]
""" % (xmin, xmax, ymin, ymax))

gp.write("""
%s
%s
set macros
dots = "dots lc rgb variable"
vortex_style = "circles lc rgb variable fs transparent solid 0.3 noborder"
heat_style = "circles lc rgb 'black' fs transparent solid 0.3 noborder"
ink_style = "circles lc rgb 'black' fs transparent solid 1 noborder"
body_style = "filledcurve lc rgb '#adadad' lw 2 fs solid border -1"
body_clear = "filledcurve lc rgb '#adadad' lw 2 fs transparent solid 0 border -1 "
""" % (
	ternary(args.mode_colorbox, """set colorbox horizontal user origin .1,.02 size .8,.04""", "unset colorbox"),
	ternary(args.mode_timelabel, """set label "t = %f" at graph 0.05, 0.90 front""" % time, '')
	)
)

if args.mode_bw:
	gp.write("""
	color(x) = (x>0) ? 0xffffff : 0x000000
	set object 1 rectangle from screen 0,0 to screen 1,1 fillcolor rgb "#808080" behind
	""")
else:
	gp.write("""
	color(x) = (x>0) ? 0xFF0000 : 0x0000FF
	""")

gp.write("""
isoline(C) = sprintf("< isoline_exe %s.psi %%s %f %f %f %f %f", C)
""" % (fin_name, vv_prec_lo, xmin, xmax, ymin, ymax))

if args.plot_pressure or args.plot_isopressure:
	gp.write("""
	set cbrange [-1.5:1]
	""")
	if args.mode_colorbox:
		gp.write("""
		set label "-1.5" at graph 0.096, 0.039 right front
		set label "1" at graph 0.904, 0.039 left front
		""")
	if args.mode_bw:
		gp.write("""
		set palette defined (-1.5 "#000000", 0 "#c8c8c8", 0.5 "#f0f0f0", 1 "#ffffff")
		""")
	else:
		gp.write("""
		set palette defined (-1.5 "#0829d5", -0.5 "#1ffcff", 0 "#2ef62e", 0.3 "yellow", 1 "red")
		""")

if args.plot_vorticity:
	gp.write("""
	set cbrange [%f:%f]
	""" % (-vv_vort_range, vv_vort_range))
	if args.mode_bw:
		gp.write("""
		set palette defined (-1 "#000000", 0 "#808080", 1 "#ffffff")
		""")
	else:
		gp.write("""
		set palette defined (-1 "#0000ff", 0 "#ffffff", 1 "#ff0000")
		""")

if args.plot_temperature:
	gp.write("""
	set cbrange [0:1]
	""")
	if args.mode_colorbox:
		gp.write("""
		set label "0" at graph 0.096, 0.039 right front
		set label "1" at graph 0.904, 0.039 left front
		""")
	if args.mode_bw:
		gp.write("""
		set palette defined (0 "#000000", 1 "#ffffff")
		""")
	else:
		gp.write("""
		set palette defined (0 "#0829d5", 0.3 "#1ffcff", 0.5 "red", 1 "yellow", 2 "white")
		""")

delim = delimiter()
if args.plot_pressure or args.plot_isopressure:
	gp.write("""%s '%s.%c.map' w image""" % (delim.get(), fin_name, args.pressure))
	if args.plot_isopressure:
		vv_isopres = os.popen("seq -s ' ' -1.5 0.075757576 1").read()[:-1]
		gp.write("""%s "< %s %s.%c.map %s" w lines lw 1 lc rgb '#9999cc'""" % (delim.get(), isoline_exe, fin_name, args.pressure, vv_isopres))

if args.plot_temperature:
	gp.write("""%s '%s.heat' w image""" % (delim.get(), fin_name))

if args.plot_vorticity:
	gp.write("""%s '%s.vrtc' w image""" % (delim.get(), fin_name))

if args.plot_vortexes_bold and 'vort' in lists:
	gp.write("""%s '< h5totxt %s -s " " -d vort'""" % (delim.get(), fin_name))
	gp.write(""" u 1:2:(%f):(color($3)) w @vortex_style""" % vv_prec_hi)

if args.plot_vortexes and 'vort' in lists:
	gp.write("""%s '< h5totxt %s -s " " -d vort'""" % (delim.get(), fin_name))
	gp.write(""" u 1:2:(color($3)) w @dots""")

if args.plot_heat and 'heat' in lists:
	gp.write("""%s '< h5totxt %s -s " " -d heat'""" % (delim.get(), fin_name))
	gp.write(""" u 1:2:(%f) w @heat_style""" % vv_prec_hi)

if args.plot_ink and 'ink' in lists:
	gp.write("""%s '< h5totxt %s -s " " -d ink'""" % (delim.get(), fin_name))
	gp.write(""" u 1:2:(%f) w @ink_style""" % vv_prec_hi)

if args.plot_streamlines:
	vv_isopsi = os.getenv("VV_ISOPSI") or os.popen("seq -s ' ' -10 0.1 10").read()[:-1]
	gp.write("""%s "< isoline_exe %s.psi %s" w lines lw 1.5 lc rgb 'black'""" % (delim.get(), fin_name, vv_isopsi))

if args.plot_isotherms:
	vv_isotherms = os.getenv("VV_ISOTHERMS") or os.popen("seq -s ' ' 0.05 0.05 0.95").read()[:-1]
	gp.write("""%s "< %s %s.heat %s" w lines lw 2 lc rgb 'black'""" % (delim.get(), isoline_exe, fin_name, vv_isotherms))

if args.plot_body:
	for b in bodies:
		gp.write("""%s '< h5totxt %s -s " " -d %s' u 1:2 w @%s"""
			% (delim.get(), fin_name, b['name'], ternary(args.blankbody-1==bodies.index(b), "body_clear", "body_style")))
		if args.plot_spring:
			p1 = b['holder_position']
			dp = b['delta_position']
			p2 = (p1[0]+dp[0], p1[1]+dp[1], p1[2]+dp[2])
			gp.write("""%s '< echo %f %f %f %f' w vectors nohead lc rgb 'black' lw 1.5"""
				% (delim.get(), p1[0], p1[1], dp[0], dp[1]))
			gp.write("""%s '< printf "%f %f\\n%f %f\\n"' u 1:2:(1.5*%f) w circles lc rgb 'black' fs solid noborder"""
				% (delim.get(), p1[0], p1[1], p2[0], p2[1], vv_prec_hi))

if args.tree:
	gp.write("""%s '%s' using 1:2:($3/2):($4/2) with boxxy fill empty lc rgb 'red'""" % (delim.get(), args.tree))

gp.write("\n")
gp.flush()
gp.close()

############################ WRITE EXIF DATA ###################################

allargs = ""
for arg in sys.argv: allargs = allargs+arg+" "

comment = """realtime = %s
argv = %s
time = %g
shift  = (%g, %g)
xrange = [%g, %g]
yrange = [%g, %g]
""" % (realtime, allargs, time, x_shift, y_shift, xmin, xmax, ymin, ymax)

for envname in ["VV_PREC_HI", "VV_ISOPSI", "VV_ISOTHERMS",
                "VV_VORT_RANGE", "VV_EPS_MULT", "VV_BODY_TEMP"]:
	if os.getenv(envname): comment+= "\n%s: %s" % (envname, os.getenv(envname))

try:
	subprocess.check_call(["exiv2",
	           '-M', "set Exif.Photo.DateTimeOriginal %s" % realtime,
	           '-M', "set Exif.Image.DateTime %s" % realtime,
	           '-M', "set Exif.Photo.UserComment charset=Ascii %s" % comment,
	           """%s""" % fout_name
	                     ])
except subprocess.CalledProcessError:
	print "Failed to execute exiv2"
except OSError:
	print "Warning: exiv2 not installed, cannot write exif comment"


