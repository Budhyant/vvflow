#!/usr/bin/python

import sys
import math
import os
import struct

class delimiter:
	"""First time it prints 'plot', else it prints comma
	"""
	def __init__(self):
		self.first = True;
	def get(self):
		if self.first:
			self.first = False
			return "plot"
		else:
			return ","

def ternary(cond, a, b):
	if cond:
		return a
	else:
		return b

def file_exists(fname):
	return 0 == os.spawnvp(os.P_WAIT, "test", ("test", "-e", fname))

def printHelp():
	print "Usage: %s -[ bBfghHinopstvV01 ] input.vb output.png xmin xmax [y_offset]" % sys.argv[0]
	print "\nPossible options are:"
	print "  -b - plot Body"
	print "  -B - choose body reference frame (default among -0 and -1)"
	print "  -f - update fields files even if the exist"
	print "  -g - plot vorticity field"
	print "  -h - display this message and exit"
	print "  -H - plot Heat particles"
	print "  -i - plot Ink (streaklines)"
	print "  -n - dry run (run subroutines and exit)"
	print "  -o - plot isOtherms"
	print "  -p - plot Pressure field"
	print "  -P - plot Pressure isolines (includes -p)"
	print "  -s - plot streamlines"
	print "  -t - plot Temperature field"
	print "  -v - plot vortex domains"
	print "  -V - plot vortex domains (bold)"
	print "  -w - Black and White mode"
	print "  -0 - choose reference frame, strictly connected to fluid"
	print "  -1 - choose reference frame, moving respectively fluid at rate (-1, 0)"

	print "\nAdditional environmental variables:"
	print "  VV_PREC_HI - horiz resolution of temperature and pressure fields (default 500; affects -opPt)"
	print "  VV_ISOPSI - streamlines levels (default $(seq -s \' \' -10 0.1 10); affects -s)"
	print "  VV_ISOTHERMS - temperature isolines (default $(seq -s \' \' 0.05 0.05 0.95); affects -o)"
	print "  VV_VORT_RANGE - change contrast of vorticity field (default 50; affects -g)"
	print "  VV_EPS_MULT - smooth temperature field (default 2; affects -gt)"
	print "  VV_BODY_TEMP - body surface temperature (default 1; affects -t)"

########################### PARSING COMMAND LINE ###############################
argv = "";
for i in sys.argv:
	argv+= i+" "

opts = ""
while len(sys.argv)>1 and sys.argv[1][0] == '-':
	opts+= sys.argv[1][1:]
	del sys.argv[1]

if opts.find('h')>=0 or len(opts)==0: printHelp(); exit();
if len(sys.argv) < 5: print "Not enough arguments. See -h for help."; exit();
if len(sys.argv) > 6: print "Too many arguments. See -h for help."; exit();

try: ffin = open(sys.argv[1]);
except IOError: print "Can not open file: %s" % sys.argv[1]; exit();

fin = sys.argv[1]
fout = sys.argv[2]

try: xmin = float(sys.argv[3]);
except ValueError: print "Bad xmin value: %s" % sys.argv[3]; exit();

try: xmax = float(sys.argv[4]);
except ValueError: print "Bad xmax value: %s" % sys.argv[4]; exit();

if len(sys.argv) > 5: y_offset = float(sys.argv[5]);
else: y_offset = 0.0

#now we've got (argv, opts, fin, fout, ffin, xmin, xmax, y_offset

############################ PARSING OPTIONS ###################################

header_skip, v_skip, h_skip, i_skip = struct.unpack("q8x q8x q8x 16x q8x", ffin.read(80))
ffin.seek(v_skip); v_size = struct.unpack("q", ffin.read(8))[0]
ffin.seek(h_skip); h_size = struct.unpack("q", ffin.read(8))[0]
ffin.seek(i_skip); i_size = struct.unpack("q", ffin.read(8))[0]

bodies = list()
for i in range(5, 27):
	ffin.seek(i*16); buf = ffin.read(16);
	if buf[8:].startswith("Body"):
		b_skip = struct.unpack("q", buf[0:8])[0]
		ffin.seek(b_skip); b_size = struct.unpack("q", ffin.read(8))[0]
		bodies.append( (b_skip, b_size) );

ffin.seek(v_skip - 8);
timestamp = struct.unpack("d", ffin.read(8))
realtime = os.popen("date -d \"1970-01-01 %d sec GMT\" +\"%%F %%H:%%M:%%S\"" % timestamp).read()
ffin.seek(header_skip); time, marker_x, marker_y = struct.unpack("8x64x d 48x d d", ffin.read(144));

ffin.close()

############################## CALC OFFSETS ####################################

if (opts.count('B') + opts.count('0') + opts.count('1')) > 1:
	print "Too many reference frames options -{B|0|1}"
	exit()
elif opts.find('0')>=0:
	#print "0 RF"
	RefFrame = '0'
	x_offset = marker_x - 1000
	y_offset+= marker_y
elif opts.find('1')>=0:
	#print "-1 RF"
	RefFrame = '1'
	x_offset = marker_x - 1000 - time
	y_offset+= marker_y
else: #B - default
	#print "Body RF"
	RefFrame = 'B'
	x_offset = 0.0

xmin+= x_offset
xmax+= x_offset
ymin = -(xmax-xmin)*9.0/32.0 + y_offset
ymax =  (xmax-xmin)*9.0/32.0 + y_offset
vv_prec_hi = os.getenv("VV_PREC_HI") or 500.0
prec_hi = (xmax-xmin)/float(vv_prec_hi)
prec_lo = (xmax-xmin)/200.0
vv_vort_range = os.getenv("VV_VORT_RANGE") or 50.
vv_vort_range = float(vv_vort_range)

############################## CALC FIELDS #####################################

boundaries = (str(xmin-prec_lo), str(xmax+prec_lo), str(ymin-prec_lo), str(ymax+prec_lo))

pids = list()
#PRESS FIELD
if opts.count('p') + opts.count('P') > 0:
	if not file_exists("%s.map" % fin) or opts.count('f') > 0:
		pids.append(os.spawnvp(os.P_NOWAIT, "presplot_exe", \
		("presplot_exe", str(fin), str(prec_hi)) + boundaries));

#TEMPERATURE FIELD
if opts.count('t') + opts.count('o') > 0:
	if not file_exists("%s.heat" % fin) or opts.count('f') > 0:
		pids.append(os.spawnvp(os.P_NOWAIT, "heatplot_exe", \
		("heatplot_exe", str(fin), str(prec_hi)) + boundaries));

#VORTICITY FIELD
if opts.count('g') > 0:
	if not file_exists("%s.vrtc" % fin) or opts.count('f') > 0:
		pids.append(os.spawnvp(os.P_NOWAIT, "vorticity_exe", \
		("vorticity_exe", str(fin), str(prec_hi)) + boundaries));

#PSI FUNCTION FIELD
if opts.count('s') > 0:
	if not file_exists("%s.psi" % fin) or opts.count('f') > 0:
		pids.append(os.spawnvp(os.P_NOWAIT, "streamlines_exe", \
		("streamlines_exe", str(fin), str(prec_lo)) + boundaries + tuple(RefFrame)));

#TODO learn try/except/finally

for i in pids:
	os.waitpid(i, 0)

############################## CALL GNUPLOT ####################################

if opts.count('n') > 0:
	exit();

gp = os.popen("gnuplot", "w")
gp.write("""
set terminal pngcairo enhanced %s size 1280, 720 font "FreeSerif, 26"
set output '%s'
""" % (ternary(opts.count('w')>0, "mono", "color"), fout))

gp.write("""
set lmargin 0
set rmargin 0
set bmargin 0
set tmargin 0
unset key
set border 0
set zeroaxis
unset xtics
unset ytics
set xrange [%f: %f]
set yrange [%f: %f]
""" % (xmin, xmax, ymin, ymax))

gp.write("""
set colorbox horizontal user origin .1,.02 size .8,.04
set label "t = %f" at graph 0.05, 0.90 front
set macros
dots = "dots lc rgb variable"
vortex_style = "circles lc rgb variable fs transparent solid 0.3 noborder"
heat_style = "circles lc rgb 'black' fs transparent solid 0.3 noborder"
ink_style = "circles lc rgb 'black' fs transparent solid 1 noborder"
body_style = "filledcurve lc rgb '#adadad' lw 2 fs solid border -1"
""" % time)

gp.write("""
color(x) = (x>0) ? 0xFF0000 : 0x0000FF
isoline(C) = sprintf("< isoline_exe %s.psi %%s %f %f %f %f %f", C)
""" % (fin, prec_lo, xmin, xmax, ymin, ymax))

if opts.count('p') + opts.count('P') > 0:
	gp.write("""
	set cbrange [-1.5:1]
	set label "-1.5" at graph 0.096, 0.039 right front
	set label "1" at graph 0.904, 0.039 left front
	""")
	if opts.count('w') > 0:
		gp.write("""
		set palette maxcolors 33 defined (-1.5 "#000000", 0 "#c8c8c8", 0.5 "#f0f0f0", 1 "#ffffff")
		""")
	else:
		gp.write("""
		set palette maxcolors 33 defined (-1.5 "#0829d5", -0.5 "#1ffcff", 0 "#2ef62e", 0.3 "yellow", 1 "red")
		""")

if opts.count('g') > 0:
	gp.write("""
	set cbrange [%f:%f]
	""" % (-vv_vort_range, vv_vort_range))
	if opts.count('w') > 0:
		gp.write("""
		set palette maxcolors 33 defined (-1 "#000000", 0 "#808080", 1 "#ffffff")
		""")
	else:
		gp.write("""
		set palette maxcolors 33 defined (-1 "#0000ff", 0 "#ffffff", 1 "#ff0000")
		""")

if opts.count('t') > 0:
	gp.write("""
	set cbrange [0:1]
	set label "0" at graph 0.096, 0.039 right front
	set label "1" at graph 0.904, 0.039 left front
	set palette maxcolors 33 defined (0 "#0829d5", 0.3 "#1ffcff", 0.5 "red", 1 "yellow", 2 "white")
	""")
	if opts.count('w') > 0:
		print "Black/white mode isnt implemented for temperature yet."

delim = delimiter()
if opts.count('p') + opts.count('P') > 0:
	gp.write("""%s '%s.map' w image""" % (delim.get(), fin))
	if opts.count('P') > 0:
		vv_isopres = os.popen("seq -s ' ' -1.5 0.075757576 1").read()[:-1]
		gp.write("""%s "< isoline_exe %s.map %s" w lines lw 1 lc rgb '#9999cc'""" % (delim.get(), fin, vv_isopres))

if opts.count('t') > 0:
	gp.write("""%s '%s.heat' w image""" % (delim.get(), fin))

if opts.count('g') > 0:
	gp.write("""%s '%s.vrtc' w image""" % (delim.get(), fin))

if opts.count('V') > 0 and v_size > 0:
	gp.write("""%s '%s' binary record=%d skip=%d format='%%3float64'""" % (delim.get(), fin, v_size, v_skip+8))
	gp.write(""" u 1:2:(%f):(color($3)) w @vortex_style""" % prec_hi)

if opts.count('v') > 0 and v_size > 0:
	gp.write("""%s '%s' binary record=%d skip=%d format='%%3float64'""" % (delim.get(), fin, v_size, v_skip+8))
	gp.write(""" u 1:2:(color($3)) w @dots""")

if opts.count('H') > 0 and h_size > 0:
	gp.write("""%s '%s' binary record=%d skip=%d format='%%3float64' """ % (delim.get(), fin, h_size, h_skip+8))
	gp.write(""" u 1:2:(%f) w @heat_style""" % prec_hi)

if opts.count('i') > 0 and i_size > 1:
	gp.write("""%s '%s' binary record=%d skip=%d format='%%3float64' """ % (delim.get(), fin, i_size-1, i_skip+32))
	gp.write(""" u 1:2:(%f) w @ink_style""" % prec_hi)

if opts.count('s') > 0:
	vv_isopsi = os.getenv("VV_ISOPSI") or os.popen("seq -s ' ' -10 0.1 10").read()[:-1]
	gp.write("""%s "< isoline_exe %s.psi %s" w lines lw 1.5 lc rgb 'black'""" % (delim.get(), fin, vv_isopsi))

if opts.count('o') > 0:
	vv_isotherms = os.getenv("VV_ISOTHERMS") or os.popen("seq -s ' ' 0.05 0.05 0.95").read()[:-1]
	gp.write("""%s "< isoline_exe %s.heat %s" w lines lw 2 lc rgb 'black'""" % (delim.get(), fin, vv_isotherms))

if opts.count('b') > 0:
	for b in bodies:
		gp.write("""%s '%s' binary record=%d skip=%d format='%%7float64' u 1:2 w @body_style""" % (delim.get(), fin, b[1], b[0]+8))

gp.write("\n")
gp.flush()
gp.close()

############################ WRITE EXIF DATA ###################################

comment = """argv = %s
time = %g
realtime = %s
offset = (%g, %g)
xrange = [%g, %g]
yrange = [%g, %g]""" % (argv, time, realtime, x_offset, y_offset, xmin, xmax, ymin, ymax)

executable = """exiv2 -M"set Exif.Photo.DateTimeOriginal %s" """ % realtime
executable+= """      -M"set Exif.Image.DateTime %s" """ % realtime
executable+= """      -M"set Exif.Photo.UserComment charset=Ascii %s" """ % comment
os.popen("%s %s" % (executable, fout))


